{"version":3,"sources":["components/toolbar/search/search-24px.svg","components/card/Card.js","components/loadingBar/LoadingBar.js","App-context.js","components/cardList/CardList.js","components/header/Header.js","components/toolbar/search/Search.js","components/toolbar/Toolbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","state","imageUrl","card","name","rarity","setName","set","type","text","className","src","this","alt","React","Component","LoadingBar","loading","color","SearchContext","createContext","keywords","updateCardList","CardList","handleScroll","container","document","querySelector","isBottom","removeEventListener","isLoading","fetchCards","element","Math","floor","getBoundingClientRect","bottom","window","innerHeight","cardList","initialized","undefined","nextPage","map","key","id","axios","get","params","pageSize","then","response","console","log","data","_links","next","setState","cards","addEventListener","_","throttle","catch","error","context","input","URI","prevState","contextType","Header","Search","setKeyword","value","keyword","Consumer","onSubmit","event","preventDefault","placeholder","onChange","target","searchIcon","Toolbar","App","Provider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e0162923.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/search-24px.db5d8122.svg\";","import React from 'react'\nimport './Card.scss';\n\nclass Card extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            imageUrl: props.card.imageUrl,\n            name: props.card.name,\n            rarity: props.card.rarity,\n            setName: props.card.set.name,\n            rarity: props.card.rarity,\n            type: props.card.type,\n            text: props.card.text,\n        }\n    }\n\n    render() {\n        return(\n            <div className=\"card\">\n                <img src={this.state.imageUrl} alt=\"card\"/>\n                \n                <div className=\"card-content\">\n                    <h2>{this.state.name}</h2>\n                    <p><strong>Set Name: </strong>{this.state.setName}</p>\n                    <p><strong>Rarity: </strong> {this.state.rarity}</p>\n                    <p><strong>Type:</strong> {this.state.type}</p>\n                    <p className=\"text\"><strong>Text:</strong> {this.state.text}</p>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default Card;","import React from 'react';\nimport BeatLoader from 'react-spinners/BeatLoader';\n\nimport './LoadingBar.scss';\n\nclass LoadingBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: this.props.loading\n        }\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.loading !== state.loading) {\n            return {\n                loading: props.loading\n            };\n        } else return null;\n    }\n\n    render() {\n        return(\n            <div className={this.state.loading ? 'loading' : 'loading invisible'}>\n                <BeatLoader\n                    color={\"#1EAEDB\"}\n                    loading={this.state.loading}\n                />\n            </div>\n        );\n    }\n}\n\nexport default LoadingBar;","import React from 'react';\n\nexport const SearchContext = React.createContext({\n    keywords: \"\",\n    updateCardList: () => {}\n});","import React from 'react'\nimport axios from 'axios';\nimport _ from 'lodash';\n\nimport Card from '../card/Card';\nimport LoadingBar from '../loadingBar/LoadingBar';\n\nimport { SearchContext } from '../../App-context';\n\nclass CardList extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            cardList: [],\n        }\n\n        this.initialized = false;\n        this.name = undefined;\n        this.keywords = \"\";\n        this.nextPage = \"\";\n    }\n\n    render() {\n\n        return(\n            <div className=\"cardList\">\n\n                <LoadingBar loading={this.state.loading} />\n                \n                {this.state.cardList.map((card) => {\n                    return(\n                        <Card key={card.id} card={card} />\n                    );\n                })}\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        if (!this.initialized) {\n            // Initialize the cardList\n            axios.get('https://api.elderscrollslegends.io/v1/cards', {\n                params: {\n                    pageSize: 20\n                }\n            }).then(response => {\n                console.log(response);\n                this.initialized = true;\n                this.nextPage = response.data._links.next;\n\n                this.setState({\n                    loading: false, \n                    cardList: response.data.cards, \n                });\n\n                document.addEventListener('scroll', _.throttle(this.handleScroll, 200));\n            }).catch(error => {\n                console.log(error);\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.context.keywords !== this.keywords) {\n            this.keywords = this.context.keywords;\n            this.fetchCards(this.context.keywords);\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('scroll', _.throttle(this.handleScroll, 200));\n    }\n\n    fetchCards(input) {\n        // API calls (Includes next page calls, and new keyword searches)\n\n        // Initialize fetch parameters\n        let params = {\n            params: {\n                pageSize: 20,\n                name: this.name,\n            }   \n        }\n\n        if (typeof(input) !== \"undefined\") {\n            params.params.name = input;\n            this.name = input;\n        }\n\n        // Don't query if we've reached the end of the result set\n        // Note: Input will be undefined if fetchCards is called from the scroll listener\n        if (typeof(input) !== \"undefined\" || this.nextPage !== \"\") {\n\n            // Use default URI if making a new query, otherwise use the saved nextPage URI\n            let URI = (typeof(input) !== \"undefined\")\n                ? 'https://api.elderscrollslegends.io/v1/cards'\n                : this.nextPage;\n\n            this.setState({loading: true});\n\n            axios.get(URI, params)\n            \n            .then(response => {\n                // If there isn't a next page, set it to an empty string\n                this.nextPage = (response.data._links && response.data._links.next)\n                    ? response.data._links.next\n                    : \"\";\n\n                // If a new query was made, replace cardList, otherwise add results to the end\n                this.setState((prevState) => {\n                    return (typeof(input) !== \"undefined\")\n                    ? { cardList: [...response.data.cards] }\n                    : { cardList: [...prevState.cardList, ...response.data.cards] }\n                });\n\n                this.setState({loading: false});\n\n                document.addEventListener('scroll', _.throttle(this.handleScroll, 200));\n\n            }).catch(error => {\n                console.log(error);\n            })\n        }\n    }\n\n    // Listener function\n    handleScroll = () => {\n        const container = document.querySelector('.cardList');\n        if (this.isBottom(container)) {\n            document.removeEventListener('scroll', this.handleScroll);\n            if (!this.state.isLoading) {\n                this.fetchCards();\n            }\n        }\n    }\n\n    // Helper functions \n    isBottom = (element) => {\n        let isBottom = Math.floor(element.getBoundingClientRect().bottom) <= window.innerHeight;\n        \n        // Only return true if we aren't already fetching the next page\n        return isBottom && !this.state.loading;\n    }\n}\n\nCardList.contextType = SearchContext;\n\nexport default CardList;","import React from 'react';\n\nimport './Header.scss';\n\nfunction Header() {\n    return(\n        <div className=\"header\">\n            <h1>Elder Scrolls Ledgends</h1>\n            <h2>Card Database</h2>\n        </div>\n    );\n}\n\nexport default Header;","import React from 'react';\n\nimport { SearchContext } from '../../../App-context';\n\nimport searchIcon from './search-24px.svg';\nimport './Search.scss'\n\nclass Search extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            keyword: \"\"\n        }\n    }\n\n    render() {\n        return(\n            <SearchContext.Consumer>\n                {(context) => (\n                    <form className=\"search-form\" onSubmit={(event) => {\n                        event.preventDefault();\n                        context.updateCardList(this.state.keyword)\n                    }}>\n                        <input\n                            name=\"search\"\n                            type=\"text\"\n                            placeholder=\"Search via card name\"\n                            value={this.state.keyword}\n                            onChange={(element => this.setKeyword(element.target.value))} />\n                        \n                        <button type=\"submit\">\n                            <img src={searchIcon} alt=\"search icon\"/>\n                        </button>\n                    </form>\n\n                )}\n            </SearchContext.Consumer>\n        );\n    }\n\n    setKeyword = (value) => {\n        this.setState({keyword: value})\n    }\n}\n\nexport default Search;","import React from 'react';\n\nimport Search from './search/Search';\nimport './Toolbar.scss'\n\nfunction Toolbar() {\n    \n    // We can add more search facets and filtering options here\n    return(\n        <div className=\"toolbar\">\n            <Search />\n        </div>\n    );\n}\n\nexport default Toolbar;","import React from 'react';\n\nimport CardList from './components/cardList/CardList';\nimport Header from './components/header/Header';\nimport Toolbar from './components/toolbar/Toolbar';\n\nimport { SearchContext } from './App-context';\n\nimport './App.scss';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.updateCardList = (keywords) => {\n      this.setState({\n        keywords: keywords\n      });\n    }\n\n    this.state = {\n      keywords: \"\",\n      updateCardList: this.updateCardList\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n  \n        <SearchContext.Provider value={this.state}>\n\n          <Toolbar />\n\n          <CardList />\n\n        </SearchContext.Provider>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}